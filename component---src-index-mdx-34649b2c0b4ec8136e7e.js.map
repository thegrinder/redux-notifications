{"version":3,"sources":["webpack:///../src/index.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","alt","src","__position","__code","__scope","Playground","NotificationsProvider","useNotification","Demo","showNotification","onClick","text","position","animationDuration","animationEasing","slideFromSide","renderNotification","removeNotification","payload","style","backgroundColor","padding","marginBottom","color","type","isMDXComponent"],"mappings":"4gBAQO,IAAMA,EAAe,Q,+LAE5B,IAAMC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,2EAC5B,kBAASC,KAKZG,GAFOL,EAAc,QACfA,EAAc,OACN,CAClBD,iBAEIO,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGP,E,oIACF,mBACD,OAAO,YAACI,EAAD,KAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,cAG5E,iBAAQ,CACN,GAAM,oBADR,oBAGA,qBAAG,mBAAGC,WAAW,KAAQ,CACrB,KAAQ,wCACP,mBAAKC,IAAI,eAAeC,IAAI,yDAFjC,SAGF,mBAAGF,WAAW,KAAQ,CAChB,KAAQ,mDACP,mBAAKC,IAAI,UAAUC,IAAI,kEAL5B,SAMF,mBAAGF,WAAW,KAAQ,CAChB,KAAQ,sDACP,mBAAKC,IAAI,eAAeC,IAAI,yEARjC,SASF,mBAAGF,WAAW,KAAQ,CAChB,KAAQ,yDACP,mBAAKC,IAAI,mBAAmBC,IAAI,8FAXrC,SAYF,mBAAGF,WAAW,KAAQ,CAChB,KAAQ,sDACP,mBAAKC,IAAI,UAAUC,IAAI,6EAd5B,SAeF,mBAAGF,WAAW,KAAQ,CAChB,KAAQ,2DACP,mBAAKC,IAAI,2BAA2BC,IAAI,iHAjB7C,KAkBA,qPAEA,iBAAQ,CACN,GAAM,WADR,WAIA,uBAAK,sBAAMF,WAAW,OAAU,CAC5B,UAAa,gBADZ,oUAgBL,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,2tBA8BL,YAAC,IAAD,CAAYG,WAAY,EAAGC,OAAQ,o8BAAu9BC,SAAO,GAC//Bd,QACAK,kBACAU,eACAC,0BACAC,qBAL+/B,gBAM//BZ,IAN+/B,EAO//BR,eAP+/B,GAQ9/BW,QAAQ,eACZ,WACK,IAAMU,EAAO,WAAM,IAEfC,EACEF,cADFE,iBAEF,OAAO,uBACP,sBAAQC,QAAS,kBAAMD,EAAiB,CACpCE,KAAM,mBADV,sBA4BF,OAAO,aApBK,kBAAM,YAAC,IAAD,CAAuBC,SAAU,CAAC,OAAQ,OAAQ,OAAQ,QAASC,kBAAmB,IAAKC,gBAAgB,OAAOC,cAAc,QAAQC,mBAAoB,gBAC5KC,EAD4K,EAC5KA,mBACAC,EAF4K,EAE5KA,QAF4K,OAGxK,mBAAKC,MAAO,CAChBC,gBAAiB,OACjBC,QAAS,OACTC,aAAc,QAEZ,iBAAGH,MAAO,CACVI,MAAO,SAEJL,EAAQP,MAEX,sBAAQa,KAAK,SAASd,QAASO,GAA/B,oBAGMnB,QAAQ,yBAClB,YAACU,EAAD,CAAMV,QAAQ,YAGP,CAAKA,QAAQ,iB,6LAO5BF,EAAW6B,gBAAiB","file":"component---src-index-mdx-34649b2c0b4ec8136e7e.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/thegrinder/rr-notifications/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { NotificationsProvider, useNotification } from './';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Demo = makeShortcode(\"Demo\");\nconst App = makeShortcode(\"App\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"rr-notifications\"\n    }}>{`rr-notifications`}</h1>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://opensource.org/licenses/MIT\"\n      }}><img alt=\"License: MIT\" src=\"https://img.shields.io/badge/License-MIT-yellow.svg\" /></a>{` `}{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/rr-notifications\"\n      }}><img alt=\"version\" src=\"https://img.shields.io/npm/v/rr-notifications.svg?style=flat\" /></a>{` `}{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://travis-ci.org/thegrinder/rr-notifications\"\n      }}><img alt=\"Build Status\" src=\"https://travis-ci.org/thegrinder/rr-notifications.svg?branch=master\" /></a>{` `}{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/semantic-release/semantic-release\"\n      }}><img alt=\"semantic-release\" src=\"https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg\" /></a>{` `}{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://codecov.io/gh/thegrinder/rr-notifications\"\n      }}><img alt=\"Codecov\" src=\"https://img.shields.io/codecov/c/github/thegrinder/rr-notifications.svg\" /></a>{` `}{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/styled-components/styled-components\"\n      }}><img alt=\"style: styled-components\" src=\"https://img.shields.io/badge/style-%F0%9F%92%85%20styled--components-orange.svg?colorB=daa357&colorA=db748e\" /></a>{` `}</p>\n    <p>{`rr-notifications is a flexible and customizable react notification system. Create your own notification component with the content you want,\nstyle it however you want and with technology of your choice and it will work.`}</p>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React from 'react';\nimport { useNotification } from 'rr-notifications';\n\nconst Demo = () => {\n  const { showNotification } = useNotification();\n  return (\n    <div>\n      <button onClick={() => showNotification({ text: 'notification' })}>\n        Add notification\n      </button>\n    </div>\n  );\n};\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { NotificationsProvider } from 'rr-notifications';\nimport Demo from 'path/to/demo';\n\nconst App = () => (\n  <NotificationsProvider\n    position={[ '80px', '80px', 'auto', 'auto']}\n    animationDuration={400}\n    animationEasing=\"ease\"\n    slideFromSide=\"right\"\n    renderNotification={({ removeNotification, payload }) => (\n      <div style={{\n        backgroundColor: '#333',\n        padding: '16px',\n        marginBottom: '8px',\n      }}>\n        <p style={{ color: '#fff' }}>\n          {payload.text}\n        </p>\n        <button type=\"button\" onClick={removeNotification}>\n          Click to close\n        </button>\n      </div>\n    )}\n  >\n    <Demo />\n  </NotificationsProvider>\n);\n`}</code></pre>\n    <Playground __position={0} __code={'() => {\\n  const Demo = () => {\\n    const { showNotification } = useNotification()\\n    return (\\n      <div>\\n        <button onClick={() => showNotification({ text: \\'notification\\' })}>\\n          Add notification\\n        </button>\\n      </div>\\n    )\\n  }\\n  const App = () => (\\n    <NotificationsProvider\\n      position={[\\'80px\\', \\'80px\\', \\'auto\\', \\'auto\\']}\\n      animationDuration={400}\\n      animationEasing=\\\"ease\\\"\\n      slideFromSide=\\\"right\\\"\\n      renderNotification={({ removeNotification, payload }) => (\\n        <div\\n          style={{\\n            backgroundColor: \\'#333\\',\\n            padding: \\'16px\\',\\n            marginBottom: \\'8px\\',\\n          }}\\n        >\\n          <p style={{ color: \\'#fff\\' }}>{payload.text}</p>\\n          <button type=\\\"button\\\" onClick={removeNotification}>\\n            Click to close\\n          </button>\\n        </div>\\n      )}\\n    >\\n      <Demo />\\n    </NotificationsProvider>\\n  )\\n  return <App />\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      NotificationsProvider,\n      useNotification,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const Demo = () => {\n          const {\n            showNotification\n          } = useNotification();\n          return <div>\n          <button onClick={() => showNotification({\n              text: 'notification'\n            })}>\n            Add notification\n          </button>\n        </div>;\n        };\n\n        const App = () => <NotificationsProvider position={['80px', '80px', 'auto', 'auto']} animationDuration={400} animationEasing=\"ease\" slideFromSide=\"right\" renderNotification={({\n          removeNotification,\n          payload\n        }) => <div style={{\n          backgroundColor: '#333',\n          padding: '16px',\n          marginBottom: '8px'\n        }}>\n            <p style={{\n            color: '#fff'\n          }}>\n              {payload.text}\n            </p>\n            <button type=\"button\" onClick={removeNotification}>\n              Click to close\n            </button>\n          </div>} mdxType=\"NotificationsProvider\">\n        <Demo mdxType=\"Demo\" />\n      </NotificationsProvider>;\n\n        return <App mdxType=\"App\" />;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}